generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
  ULTRA
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum LeadStatus {
  NEW
  IN_PROGRESS
  WON
  LOST
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  DONE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum BudgetStatus {
  PENDING
  WON
  LOST
  PAID
}

model Company {
  id        String   @id @default(uuid())
  name      String
  plan      Plan     @default(FREE)
  logoUrl   String?
  createdAt DateTime @default(now())
  users     User[]
  leads     Lead[]
  clients   Client[]
  projects  Project[]
  tasks     Task[]
  budgets   Budget[]
  webhooks  WebhookLog[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())
}

model Lead {
  id        String      @id @default(uuid())
  companyId String
  company   Company     @relation(fields: [companyId], references: [id])
  name      String
  email     String?
  phone     String?
  source    String?
  status    LeadStatus  @default(NEW)
  tags      String[]
  notes     String?
  clientId  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Client {
  id        String    @id @default(uuid())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  createdAt DateTime  @default(now())
  projects  Project[]
  budgets   Budget[]
}

model Project {
  id          String         @id @default(uuid())
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
  clientId    String
  client      Client         @relation(fields: [clientId], references: [id])
  name        String
  description String?
  status      ProjectStatus  @default(PLANNING)
  budget      Float?
  progress    Int            @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  tasks       Task[]
  budgets     Budget[]
}

model Task {
  id         String     @id @default(uuid())
  companyId  String
  company    Company    @relation(fields: [companyId], references: [id])
  projectId  String?
  project    Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assigneeId String?
  assignee   User?      @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  title      String
  description String?
  status     TaskStatus @default(TODO)
  position   Int        @default(0)
  dueDate    DateTime?
  createdAt  DateTime   @default(now())
}

model Budget {
  id        String        @id @default(uuid())
  companyId String
  company   Company       @relation(fields: [companyId], references: [id])
  projectId String?
  project   Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  clientId  String?
  client    Client?       @relation(fields: [clientId], references: [id], onDelete: SetNull)
  amount    Float
  expectedAt DateTime?
  status    BudgetStatus  @default(PENDING)
  createdAt DateTime      @default(now())
}

model WebhookLog {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  type      String
  payload   Json
  statusCode Int
  createdAt DateTime @default(now())
}

